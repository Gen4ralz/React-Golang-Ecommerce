// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gen4ralz/react-golang-ecommerce/store (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	models "github.com/gen4ralz/react-golang-ecommerce/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AllCategories mocks base method.
func (m *MockStore) AllCategories() ([]*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCategories")
	ret0, _ := ret[0].([]*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCategories indicates an expected call of AllCategories.
func (mr *MockStoreMockRecorder) AllCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCategories", reflect.TypeOf((*MockStore)(nil).AllCategories))
}

// AllProducts mocks base method.
func (m *MockStore) AllProducts() ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProducts")
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProducts indicates an expected call of AllProducts.
func (mr *MockStoreMockRecorder) AllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProducts", reflect.TypeOf((*MockStore)(nil).AllProducts))
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 models.Category) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0)
}

// CreateCoupon mocks base method.
func (m *MockStore) CreateCoupon(arg0 models.Coupon) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoupon", arg0)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockStoreMockRecorder) CreateCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockStore)(nil).CreateCoupon), arg0)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 *models.CreateUserParams) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0)
}

// DeleteAddressByAddressId mocks base method.
func (m *MockStore) DeleteAddressByAddressId(arg0, arg1 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddressByAddressId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddressByAddressId indicates an expected call of DeleteAddressByAddressId.
func (mr *MockStoreMockRecorder) DeleteAddressByAddressId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddressByAddressId", reflect.TypeOf((*MockStore)(nil).DeleteAddressByAddressId), arg0, arg1)
}

// GetAllAddressByUserId mocks base method.
func (m *MockStore) GetAllAddressByUserId(arg0 primitive.ObjectID) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddressByUserId", arg0)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddressByUserId indicates an expected call of GetAllAddressByUserId.
func (mr *MockStoreMockRecorder) GetAllAddressByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddressByUserId", reflect.TypeOf((*MockStore)(nil).GetAllAddressByUserId), arg0)
}

// GetCartByUserID mocks base method.
func (m *MockStore) GetCartByUserID(arg0 string) (*models.CartDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", arg0)
	ret0, _ := ret[0].(*models.CartDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID.
func (mr *MockStoreMockRecorder) GetCartByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockStore)(nil).GetCartByUserID), arg0)
}

// GetCategoryByID mocks base method.
func (m *MockStore) GetCategoryByID(arg0 primitive.ObjectID) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", arg0)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockStoreMockRecorder) GetCategoryByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockStore)(nil).GetCategoryByID), arg0)
}

// GetCategoryByName mocks base method.
func (m *MockStore) GetCategoryByName(arg0 string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", arg0)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockStoreMockRecorder) GetCategoryByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockStore)(nil).GetCategoryByName), arg0)
}

// GetCouponByID mocks base method.
func (m *MockStore) GetCouponByID(arg0 primitive.ObjectID) (*models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByID", arg0)
	ret0, _ := ret[0].(*models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByID indicates an expected call of GetCouponByID.
func (mr *MockStoreMockRecorder) GetCouponByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByID", reflect.TypeOf((*MockStore)(nil).GetCouponByID), arg0)
}

// GetCouponByName mocks base method.
func (m *MockStore) GetCouponByName(arg0 string) (*models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByName", arg0)
	ret0, _ := ret[0].(*models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByName indicates an expected call of GetCouponByName.
func (mr *MockStoreMockRecorder) GetCouponByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByName", reflect.TypeOf((*MockStore)(nil).GetCouponByName), arg0)
}

// GetOrderByID mocks base method.
func (m *MockStore) GetOrderByID(arg0 primitive.ObjectID) (*models.OrderDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*models.OrderDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockStoreMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockStore)(nil).GetOrderByID), arg0)
}

// GetProductById mocks base method.
func (m *MockStore) GetProductById(arg0 primitive.ObjectID) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockStoreMockRecorder) GetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockStore)(nil).GetProductById), arg0)
}

// GetProductBySlug mocks base method.
func (m *MockStore) GetProductBySlug(arg0 string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySlug", arg0)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySlug indicates an expected call of GetProductBySlug.
func (mr *MockStoreMockRecorder) GetProductBySlug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySlug", reflect.TypeOf((*MockStore)(nil).GetProductBySlug), arg0)
}

// GetRecentAddress mocks base method.
func (m *MockStore) GetRecentAddress(arg0 primitive.ObjectID) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentAddress", arg0)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentAddress indicates an expected call of GetRecentAddress.
func (mr *MockStoreMockRecorder) GetRecentAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentAddress", reflect.TypeOf((*MockStore)(nil).GetRecentAddress), arg0)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 primitive.ObjectID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0)
}

// RemoveCartByUserID mocks base method.
func (m *MockStore) RemoveCartByUserID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartByUserID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCartByUserID indicates an expected call of RemoveCartByUserID.
func (mr *MockStoreMockRecorder) RemoveCartByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartByUserID", reflect.TypeOf((*MockStore)(nil).RemoveCartByUserID), arg0)
}

// SaveAddress mocks base method.
func (m *MockStore) SaveAddress(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAddress indicates an expected call of SaveAddress.
func (mr *MockStoreMockRecorder) SaveAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddress", reflect.TypeOf((*MockStore)(nil).SaveAddress), arg0)
}

// SaveCart mocks base method.
func (m *MockStore) SaveCart(arg0 models.CartDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCart indicates an expected call of SaveCart.
func (mr *MockStoreMockRecorder) SaveCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCart", reflect.TypeOf((*MockStore)(nil).SaveCart), arg0)
}

// SaveOrder mocks base method.
func (m *MockStore) SaveOrder(arg0 models.OrderDocument) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockStoreMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockStore)(nil).SaveOrder), arg0)
}

// UpdateAddressByAddressId mocks base method.
func (m *MockStore) UpdateAddressByAddressId(arg0, arg1 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressByAddressId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddressByAddressId indicates an expected call of UpdateAddressByAddressId.
func (mr *MockStoreMockRecorder) UpdateAddressByAddressId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressByAddressId", reflect.TypeOf((*MockStore)(nil).UpdateAddressByAddressId), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 *models.OrderDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), arg0)
}
